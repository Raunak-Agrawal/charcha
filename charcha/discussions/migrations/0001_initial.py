# Generated by Django 3.0.7 on 2020-07-12 07:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('score', models.IntegerField(default=0)),
                ('avatar', models.URLField(default=None, max_length=1000, null=True)),
                ('gchat_space', models.CharField(default=None, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GchatSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('space', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'gchat_spaces',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('group_type', models.IntegerField(choices=[(0, 'Open'), (1, 'Closed'), (2, 'Secret')])),
                ('is_deleted', models.BooleanField(default=False)),
                ('purpose', models.CharField(max_length=200)),
                ('description', models.TextField(max_length=4096)),
                ('emails', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), size=8)),
            ],
            options={
                'db_table': 'groups',
            },
        ),
        migrations.CreateModel(
            name='GroupPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'group_permissions',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, null=True)),
                ('slug', models.CharField(max_length=120)),
                ('submission_time', models.DateTimeField(auto_now_add=True)),
                ('post_type', models.IntegerField(choices=[(0, 'Discussion'), (1, 'Question'), (2, 'Feedback'), (3, 'Announcement'), (16, 'Response'), (17, 'Answer')], default=0)),
                ('html', models.TextField(blank=True, max_length=8192)),
                ('is_deleted', models.BooleanField(default=False)),
                ('sticky', models.BooleanField(default=False)),
                ('accepted_answer', models.BooleanField(default=False)),
                ('resolved', models.BooleanField(default=False)),
                ('num_comments', models.IntegerField(default=0)),
                ('score', models.IntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='discussions.Group')),
                ('parent_post', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='discussions.Post')),
            ],
            options={
                'db_table': 'posts',
                'index_together': {('submission_time',)},
            },
        ),
        migrations.CreateModel(
            name='PostMembers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='discussions.Group')),
            ],
            options={
                'db_table': 'post_members',
            },
        ),
        migrations.CreateModel(
            name='GroupRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('permissions', models.ManyToManyField(related_name='roles', to='discussions.GroupPermission')),
            ],
            options={
                'db_table': 'group_roles',
            },
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='discussions.Group')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='discussions.GroupRole')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'group_members',
            },
        ),
        migrations.CreateModel(
            name='GroupGchatSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify', models.BooleanField(default=True)),
                ('sync_members', models.BooleanField(default=True)),
                ('gchat_space', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='discussions.GchatSpace')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='discussions.Group')),
            ],
            options={
                'db_table': 'group_gchat_spaces',
            },
        ),
        migrations.AddField(
            model_name='group',
            name='gchat_spaces',
            field=models.ManyToManyField(through='discussions.GroupGchatSpace', to='discussions.GchatSpace'),
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(related_name='mygroups', through='discussions.GroupMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='GchatUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100)),
                ('display_name', models.CharField(max_length=100)),
                ('user', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gchat_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'gchat_users',
            },
        ),
        migrations.CreateModel(
            name='Favourite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favourited_on', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='discussions.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'favourites',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('html', models.TextField(max_length=8192)),
                ('submission_time', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='comments', to='discussions.Post')),
            ],
            options={
                'db_table': 'comments',
            },
            managers=[
                ('user_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction', models.CharField(max_length=1)),
                ('submission_time', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reactions', to='discussions.Post')),
            ],
            options={
                'db_table': 'reactions',
                'index_together': {('post', 'author')},
            },
        ),
        migrations.AddIndex(
            model_name='gchatuser',
            index=models.Index(fields=['key'], name='gchat_users_key_3b766d_idx'),
        ),
        migrations.AddConstraint(
            model_name='gchatuser',
            constraint=models.UniqueConstraint(fields=('key',), name='gchat_user_unique_key'),
        ),
    ]
